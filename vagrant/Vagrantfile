class Hash
  def slice(*keep_keys)
    h = {}
    keep_keys.each { |key| h[key] = fetch(key) if has_key?(key) }
    h
  end unless Hash.method_defined?(:slice)
  def except(*less_keys)
    slice(*keys - less_keys)
  end unless Hash.method_defined?(:except)
end

require "base64"
require "yaml"
yaml = YAML.load(File.read("/px-deploy/.px-deploy/deployments/#{ENV['deployment']}.yml"))
env = yaml.merge(yaml['env'])
master_scripts = ["all-common", "#{yaml['platform']}-common", "all-master", "#{yaml['platform']}-master"]
node_scripts = ["all-common", "#{yaml['platform']}-common", "#{yaml['platform']}-node"]
node_script = "mkdir /var/log/px-deploy\n"
node_scripts.each do |i|
  if File.exist?("/px-deploy/vagrant/#{i}") then node_script << "(\n" + File.read("/px-deploy/vagrant/#{i}") + ") >&/var/log/px-deploy/#{i}\n" end
end

cluster = Array.new
if !yaml['cluster'].empty?
  yaml['cluster'].each do |i|
    cluster[i['id']] = i
  end
end

Vagrant.configure("2") do |config|
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provision "file", source: "/px-deploy/.px-deploy/keys/id_rsa.#{yaml['cloud']}.#{yaml['name']}", destination: "/tmp/id_rsa"
  if yaml['cloud'] == "aws"
    config.vm.box = "dummy"
    config.vm.provider :aws do |aws|
      aws.security_groups = yaml['aws__sg']
      aws.keypair_name = "px-deploy.#{yaml['name']}"
      aws.region = yaml['aws_region']
      aws.instance_type = yaml['aws_type']
      aws.ami = yaml['aws__ami']
      aws.subnet_id = yaml['aws__subnet']
      aws.associate_public_ip = true
      aws.block_device_mapping = [{ :DeviceName => "/dev/sda1", "Ebs.DeleteOnTermination" => true, "Ebs.VolumeSize" => 50 }]
    end
  elsif yaml['cloud'] == "gcp"
    config.vm.box = "google/gce"
    config.vm.provider :google do |gcp|
      File.open("/px-deploy/.px-deploy/keys/px-deploy_gcp_#{yaml['gcp__project']}.json", "w") do |line| line.puts(Base64.decode64(yaml['gcp__key'])) end
      gcp.google_project_id = yaml['gcp__project']
      gcp.zone = "#{yaml['gcp_region']}-#{yaml['gcp_zone']}"
      gcp.google_json_key_location = "/px-deploy/.px-deploy/keys/px-deploy_gcp_#{yaml['gcp__project']}.json";
      gcp.image_family = "centos-7"
      gcp.machine_type = yaml['gcp_type']
      gcp.disk_size = 50
      gcp.network = "px-net"
      gcp.subnetwork = "px-subnet"
    end
  elsif yaml['cloud'] == "azure"
    ENV['VAGRANT_NO_PARALLEL'] = 'yes'
    config.vm.box = "azure"
    config.vm.provider :azure do |azure, override|
      azure.tenant_id = yaml['azure__tenant']
      azure.subscription_id = yaml['azure__subscription']
      azure.client_id = yaml['azure__client']
      azure.client_secret = yaml['azure__secret']
      azure.resource_group_name = yaml['azure__group']
      azure.location = yaml['azure_region']
      azure.vm_image_urn = "OpenLogic:CentOS:7.5:latest"
      azure.virtual_network_name = yaml['azure__group']
      azure.subnet_name = yaml['azure__group']
      azure.vm_size = yaml['azure_type']
    end
  elsif yaml['cloud'] == "vsphere"
    config.vm.box = "FEBO/centos7"
    config.vm.box_version = "0.1"
    config.vm.provider :vsphere do |vsphere, override|
      vsphere.host = yaml['vsphere_host']
      vsphere.compute_resource_name = yaml['vsphere_compute_resource']
      vsphere.resource_pool_name = yaml['vsphere_resource_pool']
      vsphere.user = yaml['vsphere_user']
      vsphere.password = yaml['vsphere_password']
      vsphere.insecure = true
      vsphere.data_store_name = yaml['vsphere_datastore']
      vsphere.vm_base_path = yaml ['vsphere_folder']
      vsphere.template_name = yaml['vsphere_template']
      vsphere.vlan = yaml['vsphere_network']
      vsphere.vm_base_path = yaml['vsphere_folder']
    end
  end

  config.ssh.config = "/etc/ssh/ssh_config"
  config.ssh.username = "centos"
  config.ssh.private_key_path = "/px-deploy/.px-deploy/keys/id_rsa.#{yaml['cloud']}.#{yaml['name']}"

  (1..yaml['clusters'].to_i).each do |c|
    master_script = "mkdir /var/log/px-deploy\n"
    master_scripts.each do |i|
      if File.exist?("/px-deploy/vagrant/#{i}") then master_script << "(\n" + File.read("/px-deploy/vagrant/#{i}") + ") >&/var/log/px-deploy/#{i}\n" end
    end
    if !yaml['scripts'].empty?
      yaml['scripts'].each do |i|
        master_script << "(\n" + File.read("/px-deploy/.px-deploy/scripts/#{i}") + ") >&/var/log/px-deploy/#{i}\n"
      end
    end
    if !yaml['cluster'].empty?
      yaml['cluster'].each do |i|
        if i['id'] == c
          if !i['scripts'].empty?
            i['scripts'].each do |j|
              master_script << "(\n" + File.read("/px-deploy/.px-deploy/scripts/#{j}") + ") >&/var/log/px-deploy/#{j}\n"
            end
          end
          break
        end
      end
    end
    if !yaml['post_script'].empty?
      master_script << File.read("/px-deploy/.px-deploy/scripts/#{yaml['post_script']}")
    end
    subnet = "192.168.#{100+c}"
    config.vm.define "#{yaml['name']}-master-#{c}" do |master|
      master.vm.hostname = "master-#{c}"
      if yaml['cloud'] == "aws"
        master.vm.provision "file", source: "/root/.aws/credentials", destination: "/tmp/credentials"
        master.vm.provider :aws do |aws|
          aws.private_ip_address = "#{subnet}.90"
          aws.tags = { "Name" => "master-#{c}", "px-deploy_name" => yaml['name'] }
        end
      elsif yaml['cloud'] == "gcp"
        master.vm.provider :google do |gcp|
          gcp.name = "master-#{c}"
          gcp.network_ip = "#{subnet}.90"
        end
      elsif yaml['cloud'] == "azure"
        master.vm.provider :azure do |azure|
          azure.dns_name = "master-#{c}"
          azure.vm_name = "master-#{c}"
        end
      elsif yaml['cloud'] == "vsphere"
        master.vm.provider :vsphere do |vsphere|
        vsphere.extra_config = { "guestinfo.userdata" => yaml['vsphere__userdata'], "guestinfo.userdata.encoding" => "base64", "pxd.deployment" => ENV['deployment'], "pxd.hostname" => "master-#{c}" }
        end
      end
      master.vm.provision "file", source: "/px-deploy/.px-deploy/assets", destination: "/tmp/assets"
      master.vm.provision "shell", inline: master_script, env: (env.merge({ :cluster => c }))
    end

    (1..yaml['nodes'].to_i).each do |n|
      config.vm.define "#{yaml['name']}-node-#{c}-#{n}" do |node|
        node.vm.hostname = "node-#{c}-#{n}"
        if yaml['cloud'] == "aws"
          node.vm.provider :aws do |aws|
            if !cluster.empty? && !cluster[c].empty? && cluster[c]['aws_type'].length > 0
              aws.instance_type = cluster[c]['aws_type']
            else
              aws.instance_type = yaml['aws_type']
            end
            aws.private_ip_address = "#{subnet}.#{100+n}"
            aws.tags = { "Name" => "node-#{c}-#{n}", "px-deploy_name" => yaml['name'] }
            d = 97
            yaml['aws_ebs'].split(' ').each do |i|
              (type, size) = i.split(':')
              aws.block_device_mapping.push({:DeviceName => "/dev/sd#{(d+=1).chr}", "Ebs.DeleteOnTermination" => true, "Ebs.VolumeSize" => size, "Ebs.VolumeType" => type })
            end
          end
        elsif yaml['cloud'] == "gcp"
          node.vm.provider :google do |gcp|
            gcp.network_ip = "#{subnet}.#{100+n}"
            gcp.name = "node-#{c}-#{n}"
            d = 0
            yaml['gcp_disks'].split(' ').each do |i|
              (type, size) = i.split(':')
              gcp.additional_disks.push({ :disk_name => "disk-#{c}-#{n}-#{d+=1}", :disk_type => type, :disk_size => size })
            end
          end
        elsif yaml['cloud'] == "azure"
          node.vm.provider :azure do |azure|
            azure.dns_name = "node-#{c}-#{n}"
            azure.vm_name = "node-#{c}-#{n}"
            d = 0
            azure.data_disks = []
            yaml['azure_disks'].split(' ').each do |i|
              azure.data_disks.push({ :name => "disk-#{c}-#{n}-#{d+=1}", :size_gb => i})
            end
          end
        elsif yaml['cloud'] == "vsphere"
          node.vm.provider :vsphere do |vsphere|
            vsphere.extra_config = { "guestinfo.userdata" => yaml['vsphere__userdata'], "guestinfo.userdata.encoding" => "base64", "pxd.deployment" => ENV['deployment'], "pxd.hostname" => "node-#{c}-#{n}" }
          end
        end
        node.vm.provision "shell", inline: node_script, env: (env.merge({ :cluster => c }))
      end
    end
  end
end
